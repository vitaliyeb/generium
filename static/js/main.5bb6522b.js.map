{"version":3,"file":"static/js/main.5bb6522b.js","mappings":"AAuCAA,OAAOC,iBAAiB,QAAQ,KAE5B,IAAIC,EAAM,IAAIC,eACDH,OAAOI,WACpBF,EAAIG,KAAK,MAAM,mBAAoB,GACnCH,EAAII,iBAAiB,iBACrBJ,EAAIK,OAAS,SAAUC,GACnB,IACIC,SAASC,cAAc,SAASC,YAAYT,EAAIU,YAAYC,iBAE5D,MAAMC,GAAe,IAAIC,MAAQC,UAClBP,SAASQ,eAAe,aAEhCC,UAAYJ,EAGnB,MAAMK,EAAUC,MAAMC,KAAKZ,SAASa,iBAAiB,kBAChDC,KAAKC,IACK,CACHA,GAAIA,EACJC,IAAKD,EAAGE,aAAa,mBAGjCC,QAAQC,IAAIT,GAGZA,EAAQU,SAAQC,IAAgB,IAAf,GAACN,EAAE,IAAEC,GAAIK,EACLC,SAASN,GACX,IACXD,EAAGQ,aAAa,OAAQ,WACxBR,EAAGvB,iBAAiB,SAAS,MArEjD,SAAkBgC,GACd,IAAI/B,EAAM,IAAIC,eACd,MAAM+B,EAAOlC,OAAOI,WAAa,IAAM,QAAU,OACjDF,EAAIG,KAAK,MAAM,SAAD8B,OAAWD,EAAI,KAAAC,OAAIF,EAAE,SAAQ,GAC3C/B,EAAII,iBAAiB,iBACrBJ,EAAIK,OAAS,SAAUC,GACnB,IACI,MAAM4B,EAAU3B,SAAS4B,cAAc,OACvCD,EAAQE,UAAUC,IAAI,gBAEtB,MAAMC,EAAQ/B,SAAS4B,cAAc,OACrCG,EAAMF,UAAUC,IAAI,cAGpBC,EAAM7B,YAAYT,EAAIU,YAAYC,iBAClCuB,EAAQzB,YAAY6B,GACpB/B,SAASgC,KAAK9B,YAAYyB,GAQ1BA,EAAQnC,iBAAiB,SANzB,SAASyC,EAAMlC,GACPA,EAAEmC,SAAWnC,EAAEoC,gBACnBR,EAAQS,oBAAoB,QAASH,GACrCN,EAAQU,SACZ,IAIA1B,MAAMC,KAAKe,EAAQd,iBAAiB,2BAC/BO,SAASL,IACNA,EAAGvB,iBAAiB,SAAS,KACzBD,OAAOK,KAAK,iCAAiC,GAC/C,GAEd,CAAE,MAAOG,GACLmB,QAAQC,IAAIpB,EAChB,CACJ,EACAN,EAAI6C,KAAK,GACb,CAiCwBC,CAASvB,EAAI,KAGjBD,EAAGyB,MAAMC,OAAS,SACtB,IAGJ9B,MAAMC,KAAKZ,SAASa,iBAAiB,kBAAkBO,SAAQL,IAC3DA,EAAGvB,iBAAiB,SAAS,KACzB,IAAIC,EAAM,IAAIC,eACdD,EAAIG,KAAK,MAAM,gBAAD8B,OAAkBX,EAAGE,aAAa,eAAc,SAAQ,GACtExB,EAAII,iBAAiB,iBACrBJ,EAAIK,OAAS,SAAUC,GACnB,IACI,MAAM4B,EAAU3B,SAAS4B,cAAc,OACvCD,EAAQE,UAAUC,IAAI,kBAEtBH,EAAQzB,YAAYT,EAAIU,YAAYC,iBAOpCuB,EAAQnC,iBAAiB,SALzB,SAASyC,IACLN,EAAQS,oBAAoB,QAASH,GACrCN,EAAQU,QACZ,IAGArC,SAASgC,KAAK9B,YAAYyB,EAC9B,CAAE,MAAO5B,GACLmB,QAAQC,IAAIpB,EAChB,CACJ,EACAN,EAAI6C,KAAK,GAAG,GAEd,GAEV,CAAE,MAAOvC,GACLmB,QAAQC,IAAIpB,EAChB,CACJ,EACAN,EAAI6C,KAAK,GAAG","sources":["index.js"],"sourcesContent":["function openTask(id) {\n    let xhr = new XMLHttpRequest();\n    const fold = window.innerWidth < 670 ? 'phone' : 'desc';\n    xhr.open(\"GET\", `tasks/${fold}/${id}.svg`, false);\n    xhr.overrideMimeType(\"image/svg+xml\");\n    xhr.onload = function (e) {\n        try {\n            const wrapper = document.createElement('div');\n            wrapper.classList.add('task_wrapper');\n\n            const modal = document.createElement('div');\n            modal.classList.add('task_modal');\n\n\n            modal.appendChild(xhr.responseXML.documentElement);\n            wrapper.appendChild(modal);\n            document.body.appendChild(wrapper);\n\n            function close(e) {\n                if (e.target !== e.currentTarget) return;\n                wrapper.removeEventListener('click', close);\n                wrapper.remove();\n            }\n\n            wrapper.addEventListener('click', close);\n\n            Array.from(wrapper.querySelectorAll('[data-type=\"tuskLink\"]'))\n                .forEach((el) => {\n                    el.addEventListener('click', () => {\n                        window.open('https://t.me/+dinM1xnv5fM1NTIy')\n                    })\n                })\n        } catch (e) {\n            console.log(e)\n        }\n    };\n    xhr.send(\"\");\n}\n\nwindow.addEventListener('load', () => {\n\n    let xhr = new XMLHttpRequest();\n    const file = window.innerWidth < 5000 ? 'phone' : 'desc';\n    xhr.open(\"GET\", `tasks/phone.svg`, false);\n    xhr.overrideMimeType(\"image/svg+xml\");\n    xhr.onload = function (e) {\n        try {\n            document.querySelector('.full').appendChild(xhr.responseXML.documentElement);\n\n            const currentDate = (new Date()).getDate();\n            const $dayEl = document.getElementById('curentDay');\n\n            $dayEl.innerHTML = currentDate;\n\n\n            const windows = Array.from(document.querySelectorAll('[data-window]'))\n                .map((el) => {\n                    return {\n                        el: el,\n                        day: el.getAttribute('data-window')\n                    }\n                });\n            console.log(windows);\n\n\n            windows.forEach(({el, day}) => {\n                const dayAsNum = parseInt(day);\n                if (dayAsNum < 15) {\n                    el.setAttribute(\"fill\", '#AB2083')\n                    el.addEventListener('click', () => {\n                        openTask(day)\n                    })\n                } else {\n                    el.style.cursor = 'default'\n                }\n            })\n\n            Array.from(document.querySelectorAll(\"[data-answer]\")).forEach(el => {\n                el.addEventListener('click', () => {\n                    let xhr = new XMLHttpRequest();\n                    xhr.open(\"GET\", `tasks/answer/${el.getAttribute('data-answer')}.svg`, false);\n                    xhr.overrideMimeType(\"image/svg+xml\");\n                    xhr.onload = function (e) {\n                        try {\n                            const wrapper = document.createElement('div')\n                            wrapper.classList.add('wrapper_answer');\n\n                            wrapper.appendChild(xhr.responseXML.documentElement);\n\n                            function close() {\n                                wrapper.removeEventListener('click', close);\n                                wrapper.remove();\n                            }\n\n                            wrapper.addEventListener('click', close);\n                            document.body.appendChild(wrapper);\n                        } catch (e) {\n                            console.log(e)\n                        }\n                    };\n                    xhr.send(\"\");\n\n                })\n            })\n        } catch (e) {\n            console.log(e)\n        }\n    };\n    xhr.send(\"\");\n\n\n\n})"],"names":["window","addEventListener","xhr","XMLHttpRequest","innerWidth","open","overrideMimeType","onload","e","document","querySelector","appendChild","responseXML","documentElement","currentDate","Date","getDate","getElementById","innerHTML","windows","Array","from","querySelectorAll","map","el","day","getAttribute","console","log","forEach","_ref","parseInt","setAttribute","id","fold","concat","wrapper","createElement","classList","add","modal","body","close","target","currentTarget","removeEventListener","remove","send","openTask","style","cursor"],"sourceRoot":""}